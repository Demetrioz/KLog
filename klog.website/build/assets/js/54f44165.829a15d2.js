"use strict";(self.webpackChunkklog_website=self.webpackChunkklog_website||[]).push([[152],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},681:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],l={sidebar_position:2},s="Installation",c={unversionedId:"getting-started/installation",id:"getting-started/installation",title:"Installation",description:"There are a number of ways that you can choose to install KLog, depending on",source:"@site/docs/getting-started/installation.md",sourceDirName:"getting-started",slug:"/getting-started/installation",permalink:"/docs/getting-started/installation",editUrl:"https://github.com/Demetrioz/KLog/docs/getting-started/installation.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Build Process",permalink:"/docs/getting-started/build"},next:{title:"GitHub",permalink:"/docs/integrations/github"}},p={},u=[{value:"IIS and SQL Server",id:"iis-and-sql-server",level:2},{value:"From Source",id:"from-source",level:3},{value:"Pre-built binaries (Windows only)",id:"pre-built-binaries-windows-only",level:3},{value:"Docker",id:"docker",level:2}],d={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"installation"},"Installation"),(0,a.kt)("p",null,"There are a number of ways that you can choose to install KLog, depending on\nwhether you want to run the project as code, as a container, locally, or in the\ncloud. Below you'll find an overview of each method. As time goes on, the goal\nis to simplify the steps as much as possible."),(0,a.kt)("h2",{id:"iis-and-sql-server"},"IIS and SQL Server"),(0,a.kt)("h3",{id:"from-source"},"From Source"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a Microsoft SQL database"),(0,a.kt)("li",{parentName:"ol"},"Build the project by following the directions in ",(0,a.kt)("a",{parentName:"li",href:"/docs/getting-started/build"},"Build Process")),(0,a.kt)("li",{parentName:"ol"},"Setup an IIS site"),(0,a.kt)("li",{parentName:"ol"},"Deploy the code from step 2, to the IIS directory"),(0,a.kt)("li",{parentName:"ol"},"Start the IIS site")),(0,a.kt)("h3",{id:"pre-built-binaries-windows-only"},"Pre-built binaries (Windows only)"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a Microsoft SQL database"),(0,a.kt)("li",{parentName:"ol"},"Setup an IIS site"),(0,a.kt)("li",{parentName:"ol"},"Download the release files from ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/"},"GitHub"),", and extract\nthem to the IIS directory"),(0,a.kt)("li",{parentName:"ol"},"Update the appsettings.production.json mirroring step 3 from\n",(0,a.kt)("a",{parentName:"li",href:"/docs/getting-started/build"},"Build Process")),(0,a.kt)("li",{parentName:"ol"},"Make sure you have an ASPNETCORE_ENVIRONMENT environemnt variable set to\nProduction"),(0,a.kt)("li",{parentName:"ol"},"Start the IIS site")),(0,a.kt)("h2",{id:"docker"},"Docker"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Complete the build directions in ",(0,a.kt)("a",{parentName:"li",href:"/docs/getting-started/build"},"Build Process"),' including the\noptional step 6. The following steps will assume that the docker image was\ntagged as "KLog"'),(0,a.kt)("li",{parentName:"ol"},"Create a docker network for the KLog app and a database container")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker network create <NETWORK_NAME>\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Create a container running Microsoft SQL on our docker network")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=<PASSWORD>" -p 1433:1433 --name <CONTAINER_NAME> --hostname <HOST_NAME> --network <NETWORK_NAME> --network-alias <HOST_NAME> -d mcr.microsoft.com/mssql/server:2019-latest\n')),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Update the SQL password")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker exec -it <CONTAINER_NAME> /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P <PASSWORD> -Q \"ALTER LOGIN SA WITHPASSWORD='<NEW_PASSWORD>'\"\n")),(0,a.kt)("em",null,"Note: Make sure the appsettings.json in KLog.Api is using the correct connection details for the sql server. It should be something similar to: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Data Source=<HOST_NAME>,1433;Initial Catalog=<DATABASE_NAME>;Persist Security Info=False;User Id=SA;Password=<NEW_PASSWORD>;\n")),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/dotnet/dotnet-docker/blob/main/samples/host-aspnetcore-https.md"},"Create a security certificate for the docker image"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Run the KLog image created from step 6 of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/getting-started/build"},"Build Process"),".\nThe command assumes the certificate was created as in step 5."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'docker run -it -p 8000:80 -p 8001:443 -e ASPNETCORE_URLS="https://+;http://+" -e ASPNETCORE_HTTPS_PORT=8001 -e ASPNETCORE_Kestrel__Certificates__Default__Password="<PASSWORD_FROM_STEP_5>" -e ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx --name <CONTAINER_NAME> --network <NETWORK_NAME> --network-alias <HOST_NAME> -v $env:USERPROFILE\\.aspnet\\https:/https/ KLog\n')))}m.isMDXComponent=!0}}]);