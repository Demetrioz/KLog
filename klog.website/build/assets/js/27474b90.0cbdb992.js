"use strict";(self.webpackChunkklog_website=self.webpackChunkklog_website||[]).push([[860],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return g}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),g=o,m=d["".concat(p,".").concat(g)]||d[g]||c[g]||i;return n?r.createElement(m,a(a({ref:t},s),{},{components:n})):r.createElement(m,a({ref:t},s))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3086:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={sidebar_position:1},p="Build Process",u={unversionedId:"getting-started/build",id:"getting-started/build",title:"Build Process",description:"To build the KLog project from source, follow the below steps.",source:"@site/docs/getting-started/build.md",sourceDirName:"getting-started",slug:"/getting-started/build",permalink:"/docs/getting-started/build",editUrl:"https://github.com/Demetrioz/KLog/docs/getting-started/build.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Release Notes",permalink:"/docs/release-notes"},next:{title:"Installation",permalink:"/docs/getting-started/installation"}},s={},c=[{value:"Requirements",id:"requirements",level:2},{value:"1) Clone the repo",id:"1-clone-the-repo",level:2},{value:"2) Build klog.web-portal",id:"2-build-klogweb-portal",level:2},{value:"3) Build the KLog.Api project",id:"3-build-the-klogapi-project",level:2},{value:"4) Generate a public / private key pair",id:"4-generate-a-public--private-key-pair",level:2},{value:"5) Update appsettings.json",id:"5-update-appsettingsjson",level:2},{value:"6) Create a docker image (optional)",id:"6-create-a-docker-image-optional",level:2}],d={toc:c};function g(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"build-process"},"Build Process"),(0,i.kt)("p",null,"To build the KLog project from source, follow the below steps."),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://git-scm.com/"},"Git")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://nodejs.org/en/"},"Node")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://dotnet.microsoft.com/en-us/download/dotnet/6.0"},".Net 6")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.docker.com/"},"Docker")," (optional)")),(0,i.kt)("h2",{id:"1-clone-the-repo"},"1) Clone the repo"),(0,i.kt)("p",null,"Clone the repo to your local machine from\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/KTech-Industries/KLog"},"GitHub")),(0,i.kt)("h2",{id:"2-build-klogweb-portal"},"2) Build klog.web-portal"),(0,i.kt)("p",null,"Navigate to the klog.web-portal directory, and run the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm run build\n")),(0,i.kt)("h2",{id:"3-build-the-klogapi-project"},"3) Build the KLog.Api project"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Copy the /build folder from (3) to the /wwwroot folder in KLog.Api"),(0,i.kt)("li",{parentName:"ol"},"Create an appsettings.Development.json and/or an appsettings.Production.json\nwith the following format. PublicKey and PrivateKey can be blank for now:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n  "Logging": {\n    "LogLevel": {\n      "Default": "Information",\n      "Microsoft": "Warning",\n      "Microsoft.Hosting.Lifetime": "Information"\n    }\n  },\n  "AppSettings": {\n    "ConnectionStrings": {\n      "KLog.Db": "DB_CONNECTION_STRING"\n    },\n    "CORS": [ "URLS_OF_WEB_APP" ]\n  },\n  "SecuritySettings": {\n    "Issuer": "YOUR_ORG_NAME",\n    "Audience": "YOUR_ORG_NAME",\n    "SecretKey": "25_CHAR_SECRET",\n    "PublicKey": "PUBLIC_XML_RSA_KEY",\n    "PrivateKey": "PRIVATE_XML_RSA_KEY"\n  }\n}\n')),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Perform the build")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"dotnet publish KLog.Api.csproj -c Release -o <OUTPUT_DIRECTORY>\n")),(0,i.kt)("h2",{id:"4-generate-a-public--private-key-pair"},"4) Generate a public / private key pair"),(0,i.kt)("p",null,"If you don't have a public / private key pair, you can generate one by making\na post request to the /authentication/keypair endpoint. These keys are used\nin the appsettings.json file in order to encrypt and decrypt usernames and\npasswords while logging in and registering as a new user."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"POST /api/authentication/keypair\n\nResponse:\n{\n  requestId: <GUID>\n  data: {\n    publicKey: <XML_KEY>\n    privateKey: <XML_KEY>\n  }\n  error: null\n}\n")),(0,i.kt)("h2",{id:"5-update-appsettingsjson"},"5) Update appsettings.json"),(0,i.kt)("p",null,"If you havent already, add the keys generated in step 4 to your appsettings.json\nfile. From here, you have two options:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Copy the updated appsettings.json to the build folder\n(typically something like /bin/Release/net6.0)"),(0,i.kt)("li",{parentName:"ol"},"Rebuild the api (step 3)")),(0,i.kt)("p",null,"At this point, the API has been built and can be deployed via IIS, Azure App\nService, etc."),(0,i.kt)("h2",{id:"6-create-a-docker-image-optional"},"6) Create a docker image (optional)"),(0,i.kt)("p",null,"If you prefer to use docker, you can create a docker image by using the provided\ndocker file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"docker build -t <TAG_NAME> .\n")))}g.isMDXComponent=!0}}]);